@use "sass:map";
@use "sass:list";

@use "./constants.scss" as constants;
@use "./naming.scss" as naming;
@use "./plugins.scss" as plugins;
@use "./sheet.scss" as sheet;
@use "./breakpoints.scss" as breakpoints;
@use "./scales.scss" as scales;
@use "./utils.scss" as utils;
@use "./variants.scss" as variants;

// Default plugins included with siimple
// @use "./plugins/components.scss";
// @use "./plugins/experiments.scss";

// Internal variables
$-custom-plugins: utils.empty-list();
$-custom-flags: utils.empty-map();
$-custom-styles: null;

// @description Configure siimple css
@mixin configure($prefix: nulll, $breakpoints: null, $scales: null, $variants: null, $plugins: null, $styles: null, $flags: null) {
    // Update prefix used in siimple
    @if $prefix and utils.is-string($prefix) {
        @include naming.set-prefixes(("components": $prefix));
    }
    // Initialize breakpoints
    @if $breakpoints and utils.is-map($breakpoints) {
        @include breakpoints.set-breakpoints($breakpoints);
    }
    // Initialize scales
    @if $scales and utils.is-map($scales) {
        @include scales.set-scales($scales);
    }
    // Initialize variants
    @if $variants and utils.is-map($variants) {
        @include variants.set-variants($variants);
    }
    // Initialize flags
    @if $flags and utils.is-map($flags) {
        $-custom-flags: map.merge($-custom-flags, $flags) !global;
    }
    // Initialize plugins
    @if $plugins and utils.is-list($plugins) {
        $-custom-plugins: $plugins !global;
    }
    // Initialize styles
    @if $styles and utils.is-map($styles) {
        $-custom-styles: $styles !global;
    }
}

// @description generate siimple css styles
@mixin css() {
    $sheet: sheet.create-sheet();
    // Register borderbox styles
    @if utils.get-in($-custom-flags, "use-borderbox", true) {
        $sheet: sheet.add-borderbox-to-sheet($sheet);
    }
    // Register root styles
    @if utils.get-in($-custom-flags, "use-root-styles", true) {
        $sheet: sheet.add-root-styles-to-sheet($sheet);
    }
    // Register custom styles
    @if utils.is-map($-custom-styles) {
        @each $selector,$rules in $-custom-styles {
            $sheet: sheet.add-styles-to-sheet($sheet, $selector, $rules);
        }
    }
    // Register plugins
    @each $plugin in utils.flatten($-custom-plugins) {
        //$plugin: list.nth($plugins, $index);
        // Check for markup plugin
        @if plugins.is-plugin($plugin, "markup") {
            $sheet: plugins.apply-markup-plugin($sheet, $plugin);
        }
        // Check for component plugin
        @if plugins.is-plugin($plugin, "component") {
            $sheet: plugins.apply-component-plugin($sheet, $plugin);
        }
        // Check for helper plugin
        @else if plugins.is-plugin($plugin, "helper") {
            $sheet: plugins.apply-helper-plugin($sheet, $plugin);
        }
        // Check for font plugin
        @else if plugins.is-plugin($plugin, "font") {
            $sheet: sheet.add-font-to-sheet($sheet, $plugin);
        }
        // Check for keyframes plugin
        @else if plugins.is-plugin($plugin, "keyframes") {
            $sheet: sheet.add-keyframes-to-sheet($sheet, $plugin);
        }
        // Check for styles plugin
        @else if plugins.is-plugin($plugin, "styles") {
            @each $selector,$rules in utils.get-in($plugin, "styles", utils.empty-map()) {
                $sheet: sheet.add-styles-to-sheet($sheet, $selector, $rules);
            }
        }
    }
    // Compile sheet
    @include sheet.compile-sheet($sheet);
}
