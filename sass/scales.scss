@use "sass:map";
@use "./utils.scss" as utils;
@use "./constants.scss" as constants;

// Default scales
$-scales: (
    "colors": (
        "text": constants.$dark,
        "background": constants.$white,
        "primary": constants.$primary,
        "secondary": constants.$secondary,
        "hightlight": constants.$highlight,
        "accent": constants.$accent,
        "muted": constants.$muted,
        "fill": constants.$light,
    ),
    "fonts": (
        "body": constants.$font-sans, 
        "heading": inherit,
        "monospace": constants.$font-monospace,
    ),
    "font-sizes": (
        "small": 0.875rem,
        "body": 16px,
        "large": 1.25rem,
    ),
    "font-weights": (
        "body": 400,
        "heading": 700,
        "bodl": 700,
    ),
    "line-heights": (
        "heading": 1.125,
        "body": 1.5,
    ),
    "radius": (
        "default": 0.5rem,
    ),
    "shadows": (
        "default": constants.$shadow-normal,
    ),
);

// @description Configure the scales used in siimple
@mixin set-scales($custom-scales: null) {
    //$new-scales: utils.empty-map();
    @if utils.is-map($custom-scales) {
        @each $key,$value in $custom-scales {
            @if utils.is-map($value) {
                $-scales: map.set($-scales, $key, $value) !global;
            }
        }
    }
}

// @description Check if the provided key is a scale field
@function has-scale($name: "") {
    @return map.has-key($-scales, $name);
}

// @description get a scale
@function get-scale($name) {
    @return utils.get-in($-scales, $name, utils.empty-map());
}

// @description Get a single value from the scale
@function get-scale-value($name, $key, $default-value: null) {
    @return utils.get-in($-scales, ($name $key), $default-value);
}

// @description Use a specific value from scale as a property
@mixin use-scale($name, $value, $important: false) {
    //$theme: $current-theme; //theme.get-current-theme();
    $properties: ($name); 
    // Check for alias -> register the same value in all aliases keys
    @if map.has-key(constants.$css-aliases, $name) {
        $properties: map.get(constants.$css-aliases, $name);
    }
    // Parse the value --> check for value in theme
    @if utils.is-string($value) {
        $prop: utils.first-item($properties);
        @if map.has-key(constants.$css-mappings, $prop) {
            $new-prop: map.get(constants.$css-mappings, $prop);
            $new-value: utils.get-in($-scales, ($new-prop $value), null);
            @if $new-value != null {
                $value: $new-value; // Replace with new value
            }
        }
    }
    // Register each property
    @each $prop in $properties {
        @if $important == true {
            #{utils.unquote($prop)}: utils.unquote($value) !important;
        }
        @else {
            #{utils.unquote($prop)}: utils.unquote($value);
        }
    }
}
