@use "sass:list";
@use "sass:map";

@use "./utils.scss" as utils;
@use "./naming.scss" as naming;
@use "./variants.scss" as variants;
@use "./scales.scss" as scales;
@use "./breakpoints.scss" as breakpoints;
@use "./sheet.scss" as sheet;

// Internal variables
$plugin-types: (
    "component": "siimple::component", 
    "helper": "siimple::helper",
    "font": "siimple::font",
    "keyframes": "siimple::keyframes",
    "styles": "siimple::styles",
    "markup": "siimple:markup",
);

// @description Creates a new component with the specified options
// @param {map} options: component options
// @returns {map} component: parsed component map
@function create-component-plugin($options: null) {
    @if not $options {
        @error "create-component-plugin needs a component options map";
    }
    @if not map.has-key($options, "name") {
        @error "You should provide a valid component name";
    }
    @if not map.has-key($options, "styles") {
        @error "You should provide a valid component styles";
    }
    @if not map.has-key($options, "variants") {
        $options: map.set($options, "variants", utils.empty-map());
    }
    // Register component keys
    @return map.set($options, "$type", map.get($plugin-types, "component"));
}

// @description create a helper plugin
@function create-helper-plugin($options) {
    @return map.set($options, "$type", map.get($plugin-types, "helper"));
}

// @description create a markup plugin
@function create-markup-plugin($options) {
    @return map.set($options, "$type", map.get($plugin-types, "markup"));
}

// @description create font
@function create-font-plugin($options) {
    // TODO: validate font options
    @return map.set($options, "$type", map.get($plugin-types, "font"));
}

// @description Create a new keyframes plugin
@function create-keyframes-plugin($options) {
    // TODO: validate keyframes options
    @return map.set($options, "$type", map.get($plugin-types, "keyframes"));
}

// @description Create a new styles plugin
@function create-styles-plugin($styles) {
    @return (
        "$type": map.get($plugin-types, "styles"),
        "styles": $styles,
    );
}

// @scope private
// @description Internal method to check if the plugin is of the specified type
@function is-plugin($plugin, $type) {
    @return utils.is-map($plugin) and map.get($plugin, "$type") == map.get($plugin-types, $type);
}

// @description Check if the provided item is enabled
@function is-enabled($value, $include: (), $exclude: ()) {
    @if list.length($include) == 0 and list.length($exclude) == 0 {
        @return true; //No include/exclude list provided
    }
    // Check if this value is excluded
    @if list.index($exclude, $value) {
        @return false; // Icon excluded
    }
    // Check if this value is included
    @else if list.index($include, $value) {
        @return true;
    }
    // Fallback --> exclude the value
    @return false;
}

// @description Apply a component plugin to the provided sheet
@function apply-component-plugin($sheet, $component) {
    $component-id: utils.get-in($component, "id", "");
    $component-name: utils.get-in($component, "name", "");
    $component-styles: utils.get-in($component, "styles", null);
    $component-classname: naming.get-component-classname($component-name);
    //$sheet: sheet.add-classname-to-sheet($sheet, $component-name, $component-classname);
    @if $component-styles {
        $sheet: sheet.add-styles-to-sheet($sheet, $component-classname, $component-styles);
    }
    // Register each variant style
    $component-variants: utils.get-in($component, "variants", utils.empty-map());
    @each $variant-name,$variant-styles in variants.parse-variants($component-id, $component-variants) {
        $variant-classname: $component-classname; // Default variant classname is component classname
        // Check for no default variant
        @if $variant-name != "default" {
            $variant-classname: $component-classname + naming.get-variant-classname($variant-name);
        }
        // Register styles for this variant
        $sheet: sheet.add-styles-to-sheet($sheet, $variant-classname, $variant-styles);
    }
    //Return the updated sheet
    @return $sheet;
}

// @description Apply a markup plugin to the provided sheet
@function apply-markup-plugin($sheet, $markup) {
    $markup-id: utils.get-in($markup, "id", "");
    $markup-tag: utils.get-in($markup, "tag", "");
    $markup-styles: utils.get-in($markup, "styles", null);
    // Apply markup styles
    @if $markup-styles {
        $sheet: sheet.add-styles-to-sheet($sheet, $markup-tag, $markup-styles);
    }
    // Register only default variants
    $markup-default-variants: utils.get-in($markup, "variants", utils.empty-map());
    $markup-variants: variants.parse-variants($markup-id, $markup-default-variants);
    @if map.has-key($markup-variants, "default") {
        $variant-styles: utils.get-in($markup-variants, "default", utils.empty-map());
        $sheet: sheet.add-styles-to-sheet($sheet, $markup-tag, $variant-styles);
    }
    // Return the updated sheet
    @return $sheet;
}

// @description Apply a helper plugin to the sheet
@function apply-helper-plugin($sheet, $helper) {
    $helper-enabled: utils.get-in($helper, "enabled", true);
    @if $helper-enabled {
        $helper-name: utils.get-in($helper, "name", "");
        $helper-properties: utils.get-in($helper, "properties", null);
        $helper-values: utils.empty-map();
        $helper-scale: utils.get-in($helper, "scale", null);
        $helper-important: utils.get-in($helper, "important", false);
        // Check if we need to get values from scales
        @if $helper-scale and scales.has-scale($helper-scale) {
            $helper-values: scales.get-scale($helper-scale);
        }
        // Check for custom values to merge
        @if map.has-key($helper, "values") {
            $helper-values: map.merge($helper-values, map.get($helper, "values"));
        }
        $helper-responsive: utils.get-in($helper, "responsive", false);
        $helper-states: utils.get-in($helper, "states", null);
        @if not utils.is-list($helper-states) {
            $helper-states: ("default");
        }
        // Generate helper styles
        $helper-styles: utils.empty-map();
        @each $key,$value in $helper-values {
            $current-styles: utils.empty-map();
            //NOTE: we will assign the same value to all properties provided
            @each $prop in $helper-properties {
                $style-value: if($helper-important, ($value "important"), $value);
                $current-styles: map.set($current-styles, $prop, $style-value);
            }
            // Save parsed styles
            $helper-styles: map.set($helper-styles, $key, $current-styles);
        }
        // Register helpers classes for each state
        @each $state in $helper-states {
            @each $key,$values in $helper-styles {
                $classname: naming.get-helper-classname((
                    "name": $helper-name,
                    "property": $key,
                    "state": $state,
                ));
                $sheet: sheet.add-styles-to-sheet($sheet, $classname, $values);
            }
        }
        // For responsive variants, we will register the style
        // for each breakpoint in the list of breakpoints
        @if $helper-responsive {
            @each $breakpoint in breakpoints.get-breakpoints-names() {
                @each $key,$values in $helper-styles {
                    $classname: naming.get-helper-classname((
                        "name": $helper-name,
                        "property": $key,
                        "breakpoint": $breakpoint,
                    ));
                    // $breakpoint-styles: map.set(lib.empty-map(), "@breakpoint #{$breakpoint}", $styles);
                    $sheet: sheet.add-styles-to-sheet($sheet, $classname, (
                        "@breakpoint #{$breakpoint}": $values,
                    ));
                }
            }
        }
        //@debug map.get($sheet, "styles");
    }
    // Return parsed sheet
    @return $sheet;
}
