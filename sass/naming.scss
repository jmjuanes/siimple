@use "sass:map";
@use "./utils.scss" as utils;

// Naming global variables
$prefixes: (
    "components": "",
    "variants": "is-",
    "helpers": "has-",
    "variables": "siimple-",
);

// @description Update the prefixes used
@mixin set-prefixes($custom-prefixes: null) {
    @if not utils.is-map($custom-prefixes) {
        $custom-prefixes: utils.empty-map();
    }
    //$new-prefixes: utils.empty-map();
    @each $prefix in map.keys($prefixes) {
        $new-value: utils.get-in($custom-prefixes, $prefix, null);
        @if utils.is-string($new-value) {
            $prefixes: map.set($prefixes, $prefix, $new-value) !global;
        }
    }
}

// @description Update a single prefix
@mixin set-prefix($name, $value) {
    // TODO
}

// @description get prefix
@function get-prefix($name) {
    @return utils.get-in($prefixes, $name, "");
}

// @description Generate classname for helper
// @option name: name of the helper
// @option property: property of the helper
// @option state: state of the helper (default, hover, focus)
// @option breakpoint: responsive breakpoint
@function get-helper-classname($options) {
    $classname: "#{get-prefix("helpers")}#{map.get($options, "name")}";
    $property: utils.get-in($options, "property", "default");
    @if $property != "default" {
        $classname: "#{$classname}-#{$property}";
    }
    // Check for breakpoint provided
    $breakpoint: utils.get-in($options, "breakpoint", null);
    @if utils.is-string($breakpoint) {
        //@return "#{$classname}\\:#{$breakpoint}";
        @return ".#{$breakpoint}\\:#{$classname}";
    }
    // Apply for state
    $state: utils.get-in($options, "state", "default");
    @if $state == "hover" {
        @return ".hover\\:#{$classname}:hover";
    }
    @else if $state == "focus" {
        @return ".focus\\:#{$classname}:focus";
    }
    // Default --> return the default helper class
    //@return ".has-#{$name}-#{$property}";
    @return "." + $classname;
}

// @description Generate component classname
@function get-component-classname($name) {
    //$name: utils.get-in($options, "name", "");
    @return ".#{get-prefix("components")}#{$name}";
}

// @description generage variant classname
@function get-variant-classname($name) {
    //$name: utils.get-in($options, "name", "");
    @return ".#{get-prefix("variants")}#{$name}";
}

// Generate a variable name
@function get-varname($name) {
    @return "--#{get-prefix("variables")}#{$name}";
}
