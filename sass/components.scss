@use "./breakpoints.scss" as breakpoints;
@use "./constants.scss" as constants;
@use "./selectors.scss" as selectors;
@use "./variants.scss" as variants;
@use "./utils.scss" as utils;

// Default options for content
$content-default-gap: 1.5rem;
$content-default-sizes: (
    "small":  "608px",    //--> 560px
    "medium": "768px",    //--> 720px
    "large":  "1008px",   //--> 960px
    "xlarge": "1200px",   //--> 1152px
    "huge":   "1360px",   //--> 1312px
);

// Alert component mixin
@mixin alert() {
    @include selectors.use-component-selector("alert") {
        align-items: center;
        border-radius: 0.5rem;
        display: flex;
        font-weight: bold;
        margin-bottom: 1rem;
        margin-top: 0px;
        min-width: 0px;
        padding: 1.25rem;
        position: relative;
        @include variants.use-variants("alert", (
            "default": (
                "background-color": "primary",
                "color": white,
            ),
            "secondary": (
                "background-color": "secondary",
                "color": white,
            ),
        ));
    };
}

// Generate badge component configuration
@mixin badge() {
    @include selectors.use-component-selector("badge") {
        border-radius: 0.25rem;
        display: inline-block;
        font-size: 0.75rem;
        font-weight: bold;
        line-height: 1.25rem;
        // margin-bottom: 8px;
        // margin-right: 1px;
        padding: 0.25rem 0.5rem;
        text-decoration: none;
        vertical-align: text-top;
        @include variants.use-variants("badge", (
            "default": (
                "background-color": "primary",
                "color": white,
            ),
            "secondary": (
                "background-color": "secondary",
                "color": white,
            ),
        ));
    };
}

// Generate btn component configuration
@mixin btn() {
    @include selectors.use-component-selector("btn") {
        appearance: none;
        // Disable default button element borders
        // https://github.com/siimple/siimple/pull/17
        border: 0px;
        border-radius: 0.5rem;
        cursor: pointer;
        display: inline-block;
        font-family: inherit;
        font-size: inherit;
        font-weight: bold;
        line-height: inherit;
        // min-height: 24px;
        min-width: 0px;
        padding: 0.75rem 1.5rem;
        text-align: center;
        text-decoration: none;
        user-select: none;
        vertical-align: middle;
        // Button hover style
        &:hover {
            // opacity: 0.8;
            text-decoration: none;
            transition-duration: 0.3s;
            transition-property: background-color;
        }
        @include variants.use-variants("button", (
            "default": (
                "background-color": "primary",
                "color": white,
            ),
            "secondary": (
                "background-color": "secondary",
                "color": white,
            ),
            "disabled": (
                // background-color: $siimple-btn-disabled-background !important;
                // color: rgba($siimple-btn-disabled-color, $siimple-btn-disabled-color-alpha) !important;
                "cursor": "not-allowed !important",
                "opacity": "0.6 !important",
                // "pointer-events": "none",
            ),
            "full": (
                "display": block,
                "width": 100%,
            ),
        ));
    };
}

// Generate card component configuration
@mixin card() {
    @include selectors.use-component-selector("card") {
        border-radius: 0.5rem;
        display: block;
        padding: 2rem;
        text-decoration: none !important;
        width: 100%;
        @include variants.use-variants("card", (
            "default": (
                "background-color": white,
                // "box-shadow": "0 0 0.5rem rgba(0, 0, 0, 0.125)",
                "color": inherit,
            ),
        ));
    }
}

// Generate checkbox component configuration
@mixin checkbox() {
    @include selectors.use-component-selector("checkbox") {
        appearance: none;
        border-radius: 0.25rem;
        box-sizing: border-box;
        cursor: pointer;
        display: inline-block;
        height: 1.125rem;
        margin: 0.1875rem;
        position: relative;
        width: 1.125rem;
        vertical-align: top;
        // Checkbox tick base configuration
        &:after {
           background-color: transparent;
           content: "";
           height: 0.375rem;
           position: absolute;
        }
        // Transition
        &:checked,
        &:indeterminate {
           transition-duration: 0.3s;
           transition-property: background-color;
        }
        // Minus tick in indeterminate states
        &:indeterminate:after {
           border-bottom-style: solid;
           border-bottom-width: 0.125rem;
           left: 0.3125rem;
           top: 0.25rem;
           width: 0.5rem;
        }
        // Active state styles
        &:checked:after {
           border-bottom-style: solid;
           border-bottom-width: 0.125rem;
           border-left-style: solid;
           border-left-width: 0.125rem;
           left: 0.25rem;
           top: 0.3125rem;
           transform: rotate(-45deg);
           width: 0.625rem;
        }
        @include variants.use-variants("form.checkbox", (
            "default": (
                "background-color": "fill",
                "color": white,
                "&:checked, &:indeterminate": (
                    "background-color": "primary",
                ),
                "&:indeterminate:after": (
                    "border-bottom-color": white,
                ),
                "&:checked:after": (
                    "border-bottom-color": white,
                    "border-left-color": white,
                ),
            ),
        ));
    }
}

// Generate close component configuration
@mixin close() {
    @include selectors.use-component-selector("close") {
        appearance: none;
        background-color: transparent;
        border: none;
        color: currentColor;
        cursor: pointer;
        display: inline-flex;
        height: 1rem;
        opacity: 0.6;
        position: relative;
        // right: 1rem;
        // top: 1rem;
        transition: opacity 0.3s;
        width: 1rem;
        &:hover {
           opacity: 1.0;
        }
        &:before,
        &:after {
           background-color: currentColor;
           border-radius: 1px;
           content: "";
           height: 3px;
           left: 0px;
           position: absolute;
           top: 6px;
           width: 1rem;
        }
        &:before {
           transform: rotate(45deg);
        }
        &:after {
           transform: rotate(-45deg);
        }
        @include variants.use-variants("button.close", utils.empty-map());
    }
}

// Generate colum component configuration
@mixin column() {
    $column-variants: utils.empty-map();
    @each $name,$size in constants.$columns {
        $column-variants: map.set($column-variants, $name, (
            "flex": none,
            "width": $size,
            // Responsive column size
            "@breakpoints": (
                "&-{{breakpoint}}": (
                    "flex": none,
                    "width": $size,
                ),
            ),
        ));
    }
    // Hidden column
    $column-variants: map.set($column-variants, "hidden", (
        "display": none,
        "@breakpoints": (
            "&-{{breakpoint}}": (
                "display": none,
            ),
        ),
    ));
    // Base column component
    @include selectors.use-component-selector("column") {
        flex: 1;
        min-height: 0;
        padding: 1rem;
        width: 100%;
        @include variants.use-variants("column", $column-variants);
    };
    // Columns wrapper component
    @include selectors.use-component-selector("columns") {
        display: flex;
        flex-wrap: wrap;
        margin-left: -1rem;
        margin-right: -1rem;
        // width: 100%;
        @include variants.use-variants("columns", utils.empty-map());
    };
}

// Generate content component configuration
@mixin content() {
    // $content-gap: lib.get-in($options, "gap", 1.5rem);
    $content-gap: 2rem;
    $content-variants: utils.empty-map();
    @each $name,$values in breakpoints.get-breakpoints() {
        $min-size: utils.get-in($values, "min", null);
        @if $min-size not null {
            $content-media: "@media screen and (min-width: #{$min-size})";
            $content-variants: utils.set-in($content-variants, $name, (
                "#{$content-media}": (
                    "max-width": $min-size,
                ),
            ));
        }
    }
    // Return content component configuration
    @include selectors.use-component-selector("content") {
        display: block;
        margin-left: auto;
        margin-right: auto;
        padding-left: $content-gap;
        padding-right: $content-gap;
        width: 100%;
        @include variants.use-variants("content", $content-variants);
    };
}

// Generate breadcrumb component configuration
@mixin crumb() {
    // Crumbs wrapper component
    @include selectors.use-component-selector("crumbs") {
        border-radius: 0.5rem;
        display: flex;
        flex-wrap: nowrap;
        margin-bottom: 1rem;
        overflow: hidden;
        overflow-x: auto;
        padding: 0.5rem;
        white-space: nowrap !important;
        @include variants.use-variants("navigation.crumbs", utils.empty-map());
    }
    // Breadcrumb item
    @include selectors.use-component-selector("crumb") {
        color: currentColor;
        cursor: pointer;
        opacity: 0.6;
        padding-bottom: 0.5rem;
        padding-left: 0.75rem;
        padding-right: 1.5rem;
        padding-top: 0.5rem;
        position: relative;
        // text-align: center;
        text-decoration: none;
        // transition: color 0.3s;
        // Crumb hover styles
        &:hover {
            opacity: 1.0;
            transition: opacity 0.3s;
        }
        &:not(:last-child)::after {
            border-right-color: currentColor;
            border-right-width: 2px;
            border-right-style: solid;
            border-top-width: 2px;
            border-top-style: solid;
            border-top-color: currentColor;
            content: "";
            display: block;
            height: 0.5rem;
            position: absolute;
            right: 0.25rem;
            top: 1rem;
            transform: rotate(45deg);
            width: 0.5rem;
        }
        @include variants.use-variants("navigation.crumb", (
            "default": (
                "font-weight": "bold",
            ),
            "active": (
                "cursor": default, // !important;
                "opacity": 1.0,
                "pointer-events": none, // Disable clicks
            ),
        ));
    };
}

// Generate divider component configuration
@mixin divider() {
    @include selectors.use-component-selector("divider") {
        border: 0px;
        display: block;
        height: 0.125rem;
        padding: 0px;
        // Divider first and last child
        &:not(:first-child) {
           margin-top: 1rem;
        }
        &:not(:last-child) {
           margin-bottom: 1rem;
        }
        @include variants.use-variants("navigation.crumb", (
            "default": constants.$default-divider-variant,
        ));
    }
}

// Generate input component configuration
@mixin input() {
    @include selectors.use-component-selector("input") {
        border-color: transparent;
        border-style: solid;
        border-width: 0.125rem;
        border-radius: 0.5rem;
        box-sizing: border-box;
        color: inherit;
        display: block;
        font-family: inherit;
        font-size: inherit;
        line-height: inherit;
        margin: 0px;
        min-width: 0px;
        outline: 0px;
        padding: 0.625rem 1rem;
        vertical-align: top;
        width: 100%;
        @include variants.use-variants("form.input", (
            "default": (
                "background-color": "fill",
                // "background-color": "white",
                // "border-color": "muted",
                "font-weight": "normal",
                "&:focus": (
                    "border-color": "primary",
                ),
            ),
        ));
    };
}

// Generate label component configuration
@mixin label() {
    @include selectors.use-component-selector("label") {
        align-items: center;
        display: flex;
        font-size: 1rem;
        // line-height: normal;
        min-width: 0px;
        padding-bottom: 0.25rem;
        padding-top: 0.25rem;
        width: 100%;
        @include variants.use-variants("form.label", (
            "default": (
                "color": inherit,
                "font-weight": "bold",
            ),
        ));
    };
}

// Modal component for siimple
@mixin modal() {
    @include selectors.use-component-selector("modal") {
        background-color: white;
        border-radius: 0.5rem;
        display: block;
        max-height: 90vh;
        overflow-y: auto;
        padding: 2rem;
        width: 100%;
        @include variants.use-variants("dialog.modal", (
            "default": (
                "max-width": 500px,
            ),
            "small": (
                "max-width": 300px,
            ),
            "large": (
                "max-width": 900px,
            ),
        ));
    };
}

// Generate navigation link component
@mixin navlink() {
    @include selectors.use-component-selector("navlink") {
        border-radius: 0.5rem;
        color: inherit;
        cursor: pointer;
        display: block;
        margin: 0px;
        min-width: 0px;
        padding: 0.75rem;
        text-decoration: none !important;
        user-select: none;
        width: 100%;
        @include variants.use-variants("navigation.link", (
            "default": (
                "font-weight": "bold",
                "&:hover": (
                    "color": "primary",
                ),
            ),
            "active": (
                "color": "primary",
            ),
            "disabled": (
                "opacity": 0.5,
                "pointer-events": none,
            ),
        ));
    };
}

// Generate paragraph component configuration
@mixin paragraph() {
    @include selectors.use-component-selector("paragraph") {
        display: block;
        margin-bottom: 1rem;
        margin-top: 0px;
        @include variants.use-variants("text.paragraph", (
            "default": constants.$default-paragraph-variant,
            "lead": (
                "color": "muted",
                "font-size": "large",
                "font-weight": "bold",
            ),
        ));
    };
}

// Progress component
@mixin progress() {
    @include selectors.use-component-selector("progress") {
        appearance: none;
        border: none;
        border-radius: 999px;
        display: block;
        height: 0.5rem;
        margin: 0px !important;
        overflow: hidden;
        padding: 0px !important;
        width: 100%;
        // Progress bar styles
        &::-webkit-progress-bar {
           background-color: transparent;
        }
        &::-webkit-progress-value {
           background-color: currentColor;
        }
        &::-moz-progress-bar {
           background-color: currentColor;
        }
        @include variants.use-variants("form.progress", (
            "default": (
                "background-color": "fill",
                "color": "primary",
            ),
        ));
    };
}

// Generate radio component configuration
@mixin radio() {
    @include selectors.use-component-selector("radio") {
        appearance: none;
        box-sizing: border-box;
        cursor: pointer;
        display: inline-block;
        height: 1.25rem;
        margin: 0.125rem;
        position: relative;
        width: 1.25rem;
        &:before {
            // border-color: "fill";
            border-style: solid;
            border-radius: 100%;
            border-width: 0.1875rem;
            content: "";
            display: block;
            height: 1.25rem;
            left: 0px;
            position: absolute;
            top: 0px;
            width: 1.25rem;
        }
        &:after {
            background-color: transparent;
            border-radius: 999px;
            content: "";
            display: block;
            height: 0.5rem;
            left: 0.375rem;
            position: absolute;
            top: 0.375rem;
            width: 0.5rem;
        }
        // &:hover:after {
        //     // background-color: fill;
        // }
        &:checked:after {
            background-color: currentColor !important;
        }
        &:checked:before {
            border-color: currentColor !important;
        }
        @include variants.use-variants("form.radio", (
            "default": (
                "color": "primary",
                "&:before": (
                    "border-color": "fill",
                ),
                "&:hover:after": (
                    "background-color": "fill",
                ),
            ),
        ));
    };
}

// Scrim component
@mixin scrim() {
    @include selectors.use-component-selector("scrim") {
        align-items: center;
        background-color: rgba(black, 0.5);
        display: flex;
        height: 100%;
        justify-content: center;
        left: 0px;
        overflow-y: hidden;
        overflow-x: hidden;
        position: fixed;
        top: 0px;
        width: 100%;
        z-index: 400;
        @include variants.use-variants("dialog.scrim", utils.empty-map());
    };
}

// Generate select component configuration
@mixin select() {
    @include selectors.use-component-selector("select") {
        // appearance: none;
        border-color: transparent;
        border-style: solid;
        border-width: 0.125rem;
        border-radius: 0.5rem;
        box-sizing: border-box;
        color: inherit;
        display: block;
        font-size: inherit;
        line-height: inherit;
        margin: 0px;
        min-height: 3rem;
        min-width: 0px;
        outline: 0px;
        padding: 0.625rem 1rem;
        vertical-align: top;
        width: 100%;
        @include variants.use-variants("form.select", (
            "default": (
                "background-color": "fill",
                //"background-color": "white",
                //"border-color": "muted",
                "&:focus": (
                    "border-color": "primary",
                ),
            ),
        ));
    };
}

// Slider thumb styles
@mixin -slider-thumb-styles {
    background-color: currentColor;
    border: none;
    border-radius: 999px;
    box-sizing: border-box;
    height: 1rem;
    width: 1rem;
};

// @description Slider component
@mixin slider() {
    @include selectors.use-component-selector("slider") {
        appearance: none;
        border-radius: 1rem;
        cursor: pointer;
        display: block;
        height: 0.25rem;
        margin-bottom: 0.5rem;
        margin-top: 0.5rem;
        min-width: 0px;
        outline: none;
        transition: opacity 0.2s;
        width: 100%;
        // Thumb style
        &::-webkit-slider-thumb {
            @include -slider-thumb-styles; 
            -webkit-appearance: none;
            appearance: none;
        }
        &::-moz-range-thumb {
            @include -slider-thumb-styles;
        }
        &::-ms-thumb {
            @include -slider-thumb-styles;
            margin-top: 0px;
        }
        @include variants.use-variants("form.slider", (
            "default": (
                "background-color": "fill",
                "color": "primary",
            ),
            "disabled": (
                "color": "muted",
                "cursor": not-allowed,
                "opacity": 0.7,
            ),
        ));
    };
}

// Generate spinner component configuration
@mixin spinner() {
    @include selectors.use-component-selector("spinner") {
        display: inline-block;
        height: 2rem;
        position: relative;
        width: 2rem;
        // Spinner anlimation elements
        &:before,
        &:after {
            border: 0.25rem solid transparent;
            border-radius: 100%;
            content: "";
            display: block;
            height: 2rem;
            left: 0px;
            position: absolute;
            top: 0px;
            width: 2rem;
        }
        &:before {
            border-color: currentColor;
            opacity: 0.2;
        }
        &:after {
            animation-duration: 1s;
            animation-iteration-count: infinite;
            animation-name: spinner-animation;
            animation-timing-function: linear;
            border-top-color: currentColor;
        }
        @include variants.use-variants("spinner", (
            "default": (
                "color": "primary",
            ),
        ));
        // Spinner keyframes
        @keyframes spinner-animation {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(359deg);
            }
        }
    };
}

// Generate switch component configuration
@mixin switch() {
    @include selectors.use-component-selector("switch") {
        appearance: none;
        box-sizing: border-box;
        cursor: pointer;
        display: inline-block;
        height: 1.25rem;
        position: relative;
        width: 2rem;
        &:after {
            background-color: white;
            border-radius: 100%;
            content: "";
            display: block;
            height: 0.875rem;
            left: 0.1875rem;
            position: absolute;
            top: 0.1875rem;
            transition: left 0.3s ease;
            width: 0.875rem;
            z-index: 2;
        }
        &:before {
            border-radius: 2rem;
            content: "";
            display: block;
            height: 100%;
            left: 0px;
            position: absolute;
            top: 0px;
            transition: background-color 0.3s ease;
            width: 100%;
            z-index: 1;
        }
        &:checked:after {
            left: 1rem;
        }
        &:checked:before {
            background-color: currentColor;
        }
        @include variants.use-variants("form.switch", (
            "default": (
                "color": "primary",
                "&:before": (
                    "background-color": "fill",
                ),
            ),
        ));
    };
}

// Table class
@mixin table() {
    @include selectors.use-component-selector("table") {
        background-color: transparent;
        border-collapse: separate;
        border-spacing: 0;
        border-width: 0px;
        box-sizing: border-box;
        display: table;
        margin-bottom: 2rem;
        width: 100%;
        // Table row
        & tr {
           box-sizing: border-box;
           display: table-row;
        }
        // Table cell
        & th,
        & td {
            box-sizing: border-box;
            display: table-cell;
            line-height: inherit;
            // overflow: hidden;
            // white-space: nowrap;
        }
        // Table header
        & thead {
            box-sizing: border-box;
            display: table-header-group;
        }
        & thead th {
            font-weight: 600;
            text-align: left;
            vertical-align: bottom;
        }
        // Table body
        & tbody {
            display: table-row-group;
            vertical-align: middle;
        }
        & tbody td {
            vertical-align: top;
        }
        // Default table will be rounded
        // Bordered table with rouded corners
        // &--border &-header &-row:first-child &-cell:first-child {
        & thead tr:first-child th:first-child {
            border-top-left-radius: 0.5rem;
        }
        // &--border &-header &-row:first-child &-cell:last-child {
        & thead tr:first-child th:last-child {
            border-top-right-radius: 0.5rem;
        }
        // &--border &-body &-row:last-child &-cell:first-child {
        & tbody tr:last-child td:first-child {
           border-bottom-left-radius: 0.5rem;
        }
        // &--border &-body &-row:last-child &-cell:last-child {
        & tbody tr:last-child td:last-child {
           border-bottom-right-radius: 0.5rem;
        }
        @include variants.use-variants("table", (
            "default": (
                "& th, & td": (
                    "background-color": white,
                    "padding": 1.5rem,
                ),
            ),
            "divided": (
                "& thead th": (
                    "border-bottom-color": "fill",
                    "border-bottom-style": solid,
                    "border-bottom-width": 0.125rem,
                ),
                "& tbody td": (
                    "border-top-color": "fill",
                    "border-top-style": solid,
                    "border-top-width": 0.125rem,
                ),
            ),
            "bordered": (
                "& th, & td": (
                    "border-color": "fill",
                    "border-style": solid,
                    "border-width": 0.125rem,
                ),
                "& th:not(:last-child), & td:not(:last-child)": (
                    "border-right-width": "0px !important",
                ),
                "& tbody tr:not(:last-child) td": (
                    "border-bottom-width": "0px !important",
                ),
            ),
            // "hoverable": (
            //     "& tbody tr:hover td": (
            //         "background-color": "highlight",
            //         "transition": "background-color 0.3s",
            //     ),
            // ),
            // "striped": (
            //     "& tbody tr:nth-child(odd) td": (
            //         "background-color": "fill",
            //     ),
            // ),
            "fixed": (
                "table-layout": fixed,
            ),
        ));
    };
    // Responsive table container
    @include selectors.use-component-selector("table-responsive") {
        display: block;
        overflow-x: auto;
        width: 100%;
        @include variants.use-variants("table.responsive", utils.empty-map());
    };
    // Table cell style
    // plugins.create-component-plugin((
    //     "id": "table.cell",
    //     "name": "cell",
    //     "styles": (
    //         "cursor": pointer,
    //         //"padding-right": 20px !important,
    //         "position": relative,
    //         // Sortable triangles common styles
    //         "&::before, &::after": (
    //             "border-left-color": transparent,
    //             "border-left-style": solid,
    //             "border-left-width": 0.375rem,
    //             "border-right-color": transparent,
    //             "border-right-style": solid,
    //             "border-right-width": 0.375rem,
    //             "content": '""',
    //             "display": block,
    //             "height": 0px,
    //             "position": absolute,
    //             "right": 0.25rem,
    //             "transition-duration": 0.3s,
    //             "transition-property": all,
    //             "width": 0px,
    //         ),
    //         // Sortable triangle up
    //         "&::before": (
    //             "top": 1rem,
    //             "border-bottom-color": transparent,
    //             "border-bottom-style": solid,
    //             "border-bottom-width": 0.5rem,
    //         ),
    //         // Sortable triangle down
    //         "&::after": (
    //             "bottom": 1rem,
    //             "border-top-color": transparent,
    //             "border-top-style": solid,
    //             "border-top-width": 0.5rem,
    //         ),
    //     ),
    //     "variants": (
    //         "sortable": (
    //             "&::before": (
    //                 "border-bottom-color": "fill",
    //             ),
    //             "&::after": (
    //                 "border-top-color": "fill",
    //             ),
    //         ),
    //         "asc": (
    //             "&::before": (
    //                 "border-bottom-color": "primary",
    //             ),
    //         ),
    //         "desc": (
    //             "&::after": (
    //                 "border-top-color": "primary",
    //             ),
    //         ),
    //     ),
    // )),
}

// Generate textarea component configuration
@mixin textarea() {
    @include selectors.use-component-selector("textarea") {
        border-color: transparent;
        border-style: solid;
        border-width: 0.125rem;
        border-radius: 0.5rem;
        box-sizing: border-box;
        color: inherit;
        display: block;
        font-family: inherit;
        font-size: inherit;
        line-height: inherit;
        margin: 0px;
        min-width: 0px;
        outline: 0px;
        padding: 0.625rem 1rem;
        resize: vertical;
        vertical-align: top;
        width: 100%;
        @include variants.use-variants("form.textarea", (
            "default": (
                "background-color": "fill",
                //"background-color": "white",
                //"border-color": "muted",
                "&:focus": (
                    "border-color": "primary",
                ),
            ),
        ));
    };
}

// Generate title component configuration
@mixin title() {
    $title-variants: (
        "default": constants.$default-heading-variant,
    );
    @each $key,$size in constants.$headings {
        $title-variants: utils.set-in($title-variants, $key, (
            "font-size": "#{$size}",
        ));
    }
    //@debug $title-variants;
    @include selectors.use-component-selector("title") {
        display: block;
        // font-weight: 600;
        margin-bottom: 0.5em;
        padding: 0px;
        // Not first child --> add margin top
        &:not(:first-child) {
            margin-top: 2rem;
        }
        @include variants.use-variants("text.heading", $title-variants);
    };
}

// Toggler button
@mixin toggler() {
    @include selectors.use-component-selector("toggler") {
        appearance: none;
        // background-color: transparent;
        border-color: transparent;
        border-radius: 0.5rem;
        border-style: solid;
        border-width: 0.125rem;
        color: currentColor;
        cursor: pointer;
        display: block;
        height: 3rem;
        opacity: 0.8;
        padding-left: 0.75rem;
        padding-right: 0.75rem;
        position: relative;
        width: 3rem;
        z-index: 400;
        &:hover {
            opacity: 1.0;
        }
        &:before {
            border-top: 0.25rem solid currentColor;
            border-bottom: 0.25rem solid currentColor;
            content: "";
            height: 1.25rem;
            left: 0.5rem;
            position: absolute;
            width: 1.75rem;
            top: 0.75rem;
        }
        &:after {
            background-color: currentColor;
            content: "";
            height: 0.25rem;
            left: 0.5rem;
            position: absolute;
            width: 1.75rem;
            top: 1.25rem;
        }
        @include variants.use-variants("button.toggler", (
            "default": (
                "background-color": "fill",
            ),
        ));
    };
}

// Components wrapper
@mixin components() {
    @include alert();
    @include badge();
    @include btn();
    @include card();
    @include checkbox();
    @include close();
    @include column();
    @include content();
    @include crumb();
    @include divider();
    @include input();
    @include label();
    @include modal();
    @include navlink();
    @include paragraph();
    @include progress();
    @include radio();
    @include scrim();
    @include select();
    @include slider();
    @include spinner();
    @include switch();
    @include table();
    @include textarea();
    @include title();
    @include toggler();        
}
